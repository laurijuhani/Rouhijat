datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "app/generated/prisma/test"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-3.0.x", "rhel-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

model User {
  id        String      @id @default(cuid())
  email     String   @unique
  name      String
  picture     String
  role      String   @default("user")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  @@map("users")
  }

model InvitedEmail {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  @@map("invited_emails")
}


model Season {
  id       Int      @id @default(autoincrement())
  name     String   @unique
  game Game[]
  @@map("seasons")
}

model Setting {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String
  @@map("settings")
}

model Game {
  id        Int      @id @default(autoincrement())
  homeTeam  String @map("home_team")
  awayTeam  String @map("away_team")
  homeScore Int? @map("home_score")
  awayScore Int? @map("away_score")
  gameDate  DateTime @map("game_date")
  seasonId  Int     @map("seasonid")
  goalieId  Int?    @map("goalieid")
  goalie    Goalie? @relation(fields: [goalieId], references: [id])
  season    Season @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  points    Point[]
  @@map("games")
}

model Player {
  id       Int     @id @default(autoincrement())
  name     String
  nickname String?
  number   Int?
  points   Point[]
  @@map("players")
}

model Goalie {
  id      Int     @id @default(autoincrement())
  name    String
  nickname String?
  number  Int?
  games   Game[] 
  @@map("goalies")
}

model Point {
  playerId Int   @map("player_id")
  gameId   Int   @map("game_id")
  goals    Int
  assists  Int
  pm       Int 
  player   Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  game     Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
  @@id([playerId, gameId])
  @@map("points")
}

model Profile {
  id       String   @id 
  username String   @unique
  full_name String
  profile_pic_url String @map("profile_pic_url")
  profile_pic_url_hd String @map("profile_pic_url_hd")
  biography String
  category_name String @map("category_name")
  followers Int
  following Int
  number_of_posts Int @map("number_of_posts")
  @@map("ig_profiles")
}


model Post {
  id       String    @id
  taken_at_timestamp Int @map("taken_at_timestamp")
  comment_count Int @map("comment_count")
  likes Int
  caption String
  pictures Picture[]
  videos Video[]
  @@map("ig_posts")
}


model Picture {
  id      String   @id
  display_url      String @map("display_url")
  order   Int
  postId   String  @map("post_id")
  post     Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  @@map("ig_pictures")
}

model Video {
  id      String   @id
  display_url      String @map("display_url")
  video_url      String @map("video_url")
  order   Int
  postId   String  @map("post_id")
  post     Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  @@map("ig_videos")
}

model HistoryPost {
  id    Int   @id @default(autoincrement())
  content String
  title String
  order Int?
  createdAt DateTime @default(now())
  images Json
  @@map("history_posts")
}